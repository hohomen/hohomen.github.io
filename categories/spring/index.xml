<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring on Dony&#39;s blog</title>
    <link>/categories/spring/</link>
    <description>Recent content in Spring on Dony&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 23 May 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/spring/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spring Security 인증 구조</title>
      <link>/post/spring_security/</link>
      <pubDate>Thu, 23 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/spring_security/</guid>
      <description>스프링 시큐리티의 인증과정을 살펴보자.
1.Received the Http Request
스프링 시큐리티는 연속된 필터(필터에 대해서는 다음에 정리해 보도록 하자)들을 갖고 있다. 그래서 request가 왔을 때 이 request는 인증 혹은 인가를 목적으로 이 필터들을 통과한다.
2.요청 정보를 통해 AuthenticationToken 을 생성.
Authentication과 관련된 Filter에 authentication request가 들어오면 필터는 request로부터 username과 password를 추출한다. 그 다음 추출한 사용자 정보를 갖고 Authentication 객체를 생성한다. 만약 추출한 정보가 username과 password일 경우에는 이것을 이용해 UsernamePasswordAuthenticationToken(Authentication의 구현체) 객체를 생성한다.</description>
    </item>
    
    <item>
      <title>REST 기본과 REST Controller</title>
      <link>/post/spring_rest/</link>
      <pubDate>Mon, 20 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/spring_rest/</guid>
      <description>이 포스트에서는 간단히 REST를 정리하고 REST Controller에 대해서 정리하였습니다.
프론트엔드(client)에서의 REST 처리는 AJAX(JQUERY) 정리 및 코드 분석에서 자세히 정리하였습니다.
REST에 대한 자세한 개념 정리는 그런 REST API로 괜찮은가 영상을 추천합니다.
REST(Representational state transfer)
개념. URI는 하나의 고유한 리소스(Resource)를 대표하도록 설계된다. 의미 URI는 반드시 그에 상응하는 데이터 자체. ex)/boards/123
REST API -외부에서 위와 같은 방식으로 특정 URI를 통해서 사용자가 원하는 정보를 제공하는 방식. -최근에 Open API에서 많이 사용되면서 REST 방식으로 제공되는 외부 연결 URI를 REST API라고 하고, REST 방식의 서비스 제공이 가능한 것을 &amp;lsquo;Restful&amp;rsquo; 하다고 표현합니다.</description>
    </item>
    
    <item>
      <title>스프링 DI(Dependency Injection)</title>
      <link>/post/spring_di/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/spring_di/</guid>
      <description>스프링의 가장 기본적인 기능은 객체를 생성하고 초기화하여 필요로 하는 곳에 제공하는 것인데, 이 중심에는 DI(Dependency Injection)라는 의존에 대한 설계 패턴이 적용되어 있다. 목차 1. DI와 스프링 (가장 기본적 의존 생성) 2. 스프링 DI 설정 2.1 XML을 이용한 DI 설정 keyword : &amp;lt;bean&amp;gt; &amp;lt;property&amp;gt; &amp;lt;constructor-arg&amp;gt; 2.2 자바 코드를 이용한 DI 설정 keyword : @Configuration과 @Bean @ImportResource 2.3 XML 설정과 자바 코드 설정 함께 사용하기 keyword : &amp;lt;context:annotation-config/&amp;gt; , @ImportResource 3. 애노테이션을 이용한 객체 간 의존 자동 연결 keyword : @Autowired , @Resource , @Inject 4.</description>
    </item>
    
    <item>
      <title>MVC 설정과 작동 원리</title>
      <link>/post/spring_mvc_environment/</link>
      <pubDate>Fri, 29 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/spring_mvc_environment/</guid>
      <description>이 포스트에서는 스프링 MVC의 작동 방식과 스프링 환경 설정 요소 web.xml root-context.xml servlet-context.xml를 정리합니다. 이 구성은 스프링 프로젝트 생성시 기본 템플릿 환경요소이며 사용자 수준에 맞게 환경설정을 구성할 수 있습니다. 먼저 Spring MVC의 큰 그림을 그리자. 이미지 출처(https://tinkerbellbass.tistory.com/40)
스프링 MVC를 사용하기 위한 기본 설정 과정은 다음과 같다. 1. web.xml에 DispatcherServlet 설정 2. web.xml에 캐릭터 인코딩 처리를 위한 필터 설정 3. 스프링 MVC 설정 A. HandlerMapping, HandlerAdapter (= mvc:annotation-driven) B. ViewResolver 설정</description>
    </item>
    
    <item>
      <title>MVC Controller</title>
      <link>/post/spring_mvccontroller/</link>
      <pubDate>Wed, 20 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/spring_mvccontroller/</guid>
      <description>스프링 MVC를 이용한 웹 개발의 핵심인 컨트롤러의 구현 방법을 살펴보자. 컨트롤러 구현 과정은 다음과 같다. 1. @Controller 애노테이션을 클래스에 적용한다. 2. @ReaquestMapping 애노테이션을 이용해서 처리한 요청 경로를 지정한다. 3. 웹 브라우저의 요청을 처리할 메서드를 구현하고, 뷰 이름을 리턴한다. 메서드는 뷰이름을 리턴하기 전에 다음의 두 가지 작업을 수행한다. - 클라이언트의 요청을 처리한다. - 처리 결과 데이터를 뷰에 전달한다. 다양한 방식으로 모델에 데이터를 담을 수 있는데 가장 간단한 방법은 Model을 파라미터로 추가하고, Model 파라미터에 데이터를 추가하는 것이다.</description>
    </item>
    
  </channel>
</rss>