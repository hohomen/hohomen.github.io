<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScript on Hello World !</title>
    <link>/categories/javascript/</link>
    <description>Recent content in JavaScript on Hello World !</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 20 Apr 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ajax(jQuery) 정리 및 실전 코드 분석</title>
      <link>/post/javascript_ajax_jquery/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/javascript_ajax_jquery/</guid>
      <description>Intro $.ajax( ) 메서드는 내부에서 XMLHttpRequest 객체를 만들어 Ajax를 수행합니다.(직접 XMLHttpRequest 객체를 만들 때보다 간단합니다.) Syntax.문법(두 가지 형태로 사용할 수 있다.) 1. $.ajax(url, options); // 일반적 형태 $.ajax(&#39;/data.html&#39;,{ success: function (data) { $(&#39;body&#39;).append(data); } }); 2. $.ajax(options); //매개변수 url은 옵션 속성으로 지정할 수도 있다.(옵션은 객체로 이루어져있다.) $.ajax({ url: &#39;/data.html&#39;, success: function (data) { $(&#39;body&#39;).append(data); } });
메서드 옵션(객체의 속성은 대부분 자동으로 지정한다.) 주요 속성은 다음과 같다. async : 동기 비동기를 지정합니다.</description>
    </item>
    
    <item>
      <title>ajax (XMLHttpRequest)</title>
      <link>/post/javascript_xmlhttprequest/</link>
      <pubDate>Wed, 20 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/javascript_xmlhttprequest/</guid>
      <description>본 내용은, 도서 : 모던 웹을 위한 JavaScript jQuery 입문 3판의 내용을 정리한 것입니다. 1. XMLHttpRequest 객체 는 빈 편지지와 같습니다. 이 객체에는 수취인과 배송방식, 내용물을 넣을 수 있습니다. a. open( ) 메서드로 편지지의 전송 위치와 방식을 지정합니다. request.open(, , ) request.open(&#39;GET&#39;, &#39;/data.html&#39;, false); b. send( ) 메서드로 편지를 보냅니다. request.send( ); 현재 /data.html은 HTML 형식의 문자열이죠? 따라서 innerHTML 속성에 넣어주면 응답받은 데이터를 곧바로 출력할 수 있습니다. cf. url /data.html 데이터를 HTML 형식으로 제공합니다.</description>
    </item>
    
    <item>
      <title>좋은 POST들</title>
      <link>/post/javascript_link/</link>
      <pubDate>Wed, 20 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/javascript_link/</guid>
      <description> 자바스크립트 비동기 처리와 콜백 함수
 자바스크립트 Promise 쉽게 이해하기
   li  a { color: #4374D9; border-bottom: none!important; }  </description>
    </item>
    
    <item>
      <title>HTML에서 JavaScript Load</title>
      <link>/post/javascript_load/</link>
      <pubDate>Wed, 20 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/javascript_load/</guid>
      <description>본 글은 생활코딩의 내용을 정리 요약한 것이다. 먼저 HTML에서 JavaScript Load하는 방법은 3가지로 나눌 수 있다. 1. 인라인 alert(&#39;hello world&#39;) 자바스크립트 코드 onclick=&#34; &#34;, onchange 등등 HTML 속성 장점 : 태그 안에 분명히 있다는 것. 단점 : html, 즉 정보를 나타내는 코드에 제어 코드가 들어가있다. 유지보수에 어렵다. 짬뽕. js가 필요할 때 js에 찾아가고, html필요할 때 html에 찾아가는게 좋다. 2. script태그 까지는 html태그. 이제 script 코드가 나온다는 신호 장점 : 인라인보다 유지보수보다 용이해짐.</description>
    </item>
    
    <item>
      <title>객체(JavaScript Basic)</title>
      <link>/post/javascript_object/</link>
      <pubDate>Wed, 20 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/javascript_object/</guid>
      <description>1.개요#배열(Javascript에서 자료형은 객체이다.)은 객체를 기반으로 만들어졌으므로 배열과 객체는 상당히 비슷합니다. 다른 점이 있다면 배열은 요소에 접근할 때 인덱스를 사용하지만 var array = [&#39;사과&#39;, &#39;바나나&#39;, &#39;망고&#39;, &#39;딸기&#39;]; (배열 선언) 객체는 키를 사용한다는 점입니다. var product = { 제품명: &#39;7D 건조 망고&#39;, 유형: &#39;당절임&#39;, 성분: &#39;망고, 설탕, 메타중아황산나트륨, 치자황색소&#39;, 원산지: &#39;필리핀&#39; }; #요소에 접근하는 방법은 2가지가 있습니다. 1. 배열과 비슷한 방법 product[&#39;제품명&#39;] product[&#39;유형&#39;] product[&#39;성분&#39;] product[&#39;원산지&#39;] 2. 일반적으로 사용하는 방법 product.제품명 product.유형 product.성분 product.</description>
    </item>
    
    <item>
      <title>함수(JavaScript Basic)</title>
      <link>/post/javascript_function/</link>
      <pubDate>Tue, 19 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/javascript_function/</guid>
      <description>함수는 코드의 집합을 나타내는 자료형입니다. 1.익명함수: 이름이 없으므로 변수에 넣어 사용해야 합니다.(point= 변수) var 함수 = function() { }; 자바스크립트에서 함수는 한의 자료형이지만 여타, 자료형과 다르게 뒤에 괄호를 열고 닫음으로써 코드를 실행합니다. = &#39;함수를 호출&#39; 함수(); // 익명함수를 호출할 때. 2.선언적 함수: 이름이 있는 함수. function 함수( ) { } #선언적 함수와 익명 함수의 차이점. 익명함수는 변수로 선언했기 때문에 오류 발생. 반대로 선언적 함수를 사용하면 코드가 정상적으로 실행.  함수( ); // 오류.</description>
    </item>
    
    <item>
      <title>배열(JavaScript Basic)</title>
      <link>/post/javascript_array/</link>
      <pubDate>Mon, 18 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/javascript_array/</guid>
      <description>본 내용은 필자가 JavaScript 배열에서 정리되지 않은 부분만 작성하였습니다. 배열은 여러 개의 변수를 한꺼번에 선언해 다룰 수 있는 자료형입니다. 배열은 아래처럼 대괄호 []로 생성합니다. 대괄호를 사용하고 안에 있는 값을 쉼표로 구분해 입력합니다. 배연 안에 입력된 값을 요소 element라고 합니다. 어떠한 종류의 자료형도 요소가 될 수 있습니다. var exampleA = [273, &#39;String&#39;, true, function() {}, { }, [273, 103]]; 각 요소를 사용하기 exampleA[n] length 속성 alert(exampleA.legth); push() 메소드 exampleA.push(23); 문자열과 배열 var a = &#34;</description>
    </item>
    
    <item>
      <title>Javascript 기본 문법</title>
      <link>/post/javascript_basic/</link>
      <pubDate>Sun, 17 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/javascript_basic/</guid>
      <description>&amp;lsquo;모던 웹을 위한 JavaScript jQuery입문 3판&amp;rsquo;의 내용을 요약한 것입니다.
CHAPTER 2 기본 문법 2.1 기본 용어 2 키워드 자바스크립트가 처음 만들어질 때 정해진 특별한 의미가 있는 단어를 &#39;키워드&#39;라고 합니다. (사진P.28) 3 식별자 식별자를 만들 때는 다음의 규칙을 지켜야 합니다. 1.키워드를 사용하면 안 됩니다. 2.숫자로 시작하면 안 됩니다. 3.특수 문자는 _와 $만 허용합니다. 4.공백 문자를 포함할 수 없습니다. 이 네 가지 규칙만 만족한다면 모든 단어를 식별자로 사용할 수 있습니다 식별자를 만들 때 알파벳을 사용하는 것 외에도 자바스크립트 개발자 대부분이 지키는 관례가 있습니다.</description>
    </item>
    
  </channel>
</rss>