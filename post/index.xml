<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Post on Dony Rose</title>
    <link>/post/</link>
    <description>Recent content in Post on Dony Rose</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 19 Jun 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Contents Summary</title>
      <link>/post/a_index/</link>
      <pubDate>Wed, 19 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/a_index/</guid>
      <description>컨텐츠들은 해당 내용을 학습하며 정리 목적으로 작성하였습니다.  ETC  (Ant) build.xml 작성법  Spring  Spring Security 인증 구조 REST 기본과 REST Controller MVC 설정과 작동 원리 MVC CONTROLLER 스프링 DI(Dependency Injection)
  XML  XML 기본 XML 특수 기호 XML 네임스페이스 DTD 문서 제작 기본  JavaScript  ajax(jQuery) 정리 및 실전 코드 분석 ajax(XMLHttpRequest) 함수(JavaScript Basic) 객체(JavaScript Basic) 배열(JavaScript Basic) 기본 문법(Javascript Basic) HTML에서 JavaScript Load Link  CSS  Bootstrap grid system CSS 기본 CSS 박스모델   li  a { color: #4374D9; border-bottom: none!</description>
    </item>
    
    <item>
      <title>Spring Security 인증 구조</title>
      <link>/post/spring_security/</link>
      <pubDate>Thu, 23 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/spring_security/</guid>
      <description>스프링 시큐리티의 인증과정을 살펴보자. 위의 그림을 보며 이해하면 길을 잃지 않을 것이다.
1.Received the Http Request
스프링 시큐리티는 연속된 필터(필터에 대해서는 다음에 정리해 보도록 하자)들을 갖고 있다. 그래서 request가 왔을 때 이 request는 인증 혹은 인가를 목적으로 이 필터들을 통과한다.
2.요청 정보를 통해 AuthenticationToken 을 생성.
Authentication과 관련된 Filter에 authentication request가 들어오면 필터는 request로부터 username과 password를 추출한다. 그 다음 추출한 사용자 정보를 갖고 Authentication 객체를 생성한다. 만약 추출한 정보가 username과 password일 경우에는 이것을 이용해 UsernamePasswordAuthenticationToken(Authentication의 구현체) 객체를 생성한다.</description>
    </item>
    
    <item>
      <title>REST 기본과 REST Controller</title>
      <link>/post/spring_rest/</link>
      <pubDate>Mon, 20 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/spring_rest/</guid>
      <description>이 포스트에서는 간단히 REST를 정리하고 REST Controller에 대해서 정리합니다.
프론트엔드(client)에서의 REST 처리는 AJAX(JQUERY) 정리 및 실전 코드 분석에 정리하였습니다.
REST에 대한 자세한 개념 정리는 그런 REST API로 괜찮은가에서 이해할 수 있습니다.
REST(Representational state transfer)
개념. URI는 하나의 고유한 리소스(Resource)를 대표하도록 설계된다. 의미 URI는 반드시 그에 상응하는 데이터 자체. ex)/boards/123
REST API -외부에서 위와 같은 방식으로 특정 URI를 통해서 사용자가 원하는 정보를 제공하는 방식. -최근에 Open API에서 많이 사용되면서 REST 방식으로 제공되는 외부 연결 URI를 REST API라고 하고, REST 방식의 서비스 제공이 가능한 것을 &amp;lsquo;Restful&amp;rsquo; 하다고 표현합니다.</description>
    </item>
    
    <item>
      <title>ajax(jQuery) 정리 및 실전 코드 분석</title>
      <link>/post/javascript_ajax_jquery/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/javascript_ajax_jquery/</guid>
      <description>Intro $.ajax( ) 메서드는 내부에서 XMLHttpRequest 객체를 만들어 Ajax를 수행합니다.(직접 XMLHttpRequest 객체를 만들 때보다 간단합니다.) Syntax.문법(두 가지 형태로 사용할 수 있다.) 1. $.ajax(url, options); // 일반적 형태 $.ajax(&#39;/data.html&#39;,{ success: function (data) { $(&#39;body&#39;).append(data); } }); 2. $.ajax(options); //매개변수 url은 옵션 속성으로 지정할 수도 있다.(옵션은 객체로 이루어져있다.) $.ajax({ url: &#39;/data.html&#39;, success: function (data) { $(&#39;body&#39;).append(data); } });
메서드 옵션(객체의 속성은 대부분 자동으로 지정한다.) 주요 속성은 다음과 같다. async : 동기 비동기를 지정합니다.</description>
    </item>
    
    <item>
      <title>스프링 DI(Dependency Injection)</title>
      <link>/post/spring_di/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/spring_di/</guid>
      <description>스프링의 가장 기본적인 기능은 객체를 생성하고 초기화하여 필요로 하는 곳에 제공하는 것인데, 이 중심에는 DI(Dependency Injection)라는 의존에 대한 설계 패턴이 적용되어 있다. 목차 1. DI와 스프링 (가장 기본적 의존 생성) 2. 스프링 DI 설정 2.1 XML을 이용한 DI 설정 keyword : &amp;lt;bean&amp;gt; &amp;lt;property&amp;gt; &amp;lt;constructor-arg&amp;gt; 2.2 자바 코드를 이용한 DI 설정 keyword : @Configuration과 @Bean @ImportResource 2.3 XML 설정과 자바 코드 설정 함께 사용하기 keyword : &amp;lt;context:annotation-config/&amp;gt; , @ImportResource 3. 애노테이션을 이용한 객체 간 의존 자동 연결 keyword : @Autowired , @Resource , @Inject 4.</description>
    </item>
    
    <item>
      <title>MVC 설정과 작동 원리</title>
      <link>/post/spring_mvc_environment/</link>
      <pubDate>Fri, 29 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/spring_mvc_environment/</guid>
      <description>이 포스트에서는 스프링 MVC의 작동 방식과 스프링 환경 설정 요소 web.xml root-context.xml servlet-context.xml를 정리합니다. 이 구성은 스프링 프로젝트 생성시 기본 템플릿 환경요소이며 사용자 수준에 맞게 환경설정을 구성할 수 있습니다. 먼저 Spring MVC의 큰 그림을 그리자. 이미지 출처(https://tinkerbellbass.tistory.com/40)
스프링 MVC를 사용하기 위한 기본 설정 과정은 다음과 같다. 1. web.xml에 DispatcherServlet 설정 2. web.xml에 캐릭터 인코딩 처리를 위한 필터 설정 3. 스프링 MVC 설정 A. HandlerMapping, HandlerAdapter (= mvc:annotation-driven) B. ViewResolver 설정</description>
    </item>
    
    <item>
      <title>MVC Controller</title>
      <link>/post/spring_mvccontroller/</link>
      <pubDate>Wed, 20 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/spring_mvccontroller/</guid>
      <description>스프링 MVC를 이용한 웹 개발의 핵심인 컨트롤러의 구현 방법을 살펴보자. 컨트롤러 구현 과정은 다음과 같다. 1. @Controller 애노테이션을 클래스에 적용한다. 2. @ReaquestMapping 애노테이션을 이용해서 처리한 요청 경로를 지정한다. 3. 웹 브라우저의 요청을 처리할 메서드를 구현하고, 뷰 이름을 리턴한다. 메서드는 뷰이름을 리턴하기 전에 다음의 두 가지 작업을 수행한다. - 클라이언트의 요청을 처리한다. - 처리 결과 데이터를 뷰에 전달한다. 다양한 방식으로 모델에 데이터를 담을 수 있는데 가장 간단한 방법은 Model을 파라미터로 추가하고, Model 파라미터에 데이터를 추가하는 것이다.</description>
    </item>
    
    <item>
      <title>ajax (XMLHttpRequest)</title>
      <link>/post/javascript_xmlhttprequest/</link>
      <pubDate>Wed, 20 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/javascript_xmlhttprequest/</guid>
      <description>본 내용은, 도서 : 모던 웹을 위한 JavaScript jQuery 입문 3판의 내용을 정리한 것입니다. 1. XMLHttpRequest 객체 는 빈 편지지와 같습니다. 이 객체에는 수취인과 배송방식, 내용물을 넣을 수 있습니다. a. open( ) 메서드로 편지지의 전송 위치와 방식을 지정합니다. request.open(, , ) request.open(&#39;GET&#39;, &#39;/data.html&#39;, false); b. send( ) 메서드로 편지를 보냅니다. request.send( ); 현재 /data.html은 HTML 형식의 문자열이죠? 따라서 innerHTML 속성에 넣어주면 응답받은 데이터를 곧바로 출력할 수 있습니다. cf. url /data.html 데이터를 HTML 형식으로 제공합니다.</description>
    </item>
    
    <item>
      <title>좋은 POST들</title>
      <link>/post/javascript_link/</link>
      <pubDate>Wed, 20 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/javascript_link/</guid>
      <description> 자바스크립트 비동기 처리와 콜백 함수
 자바스크립트 Promise 쉽게 이해하기
   li  a { color: #4374D9; border-bottom: none!important; }  </description>
    </item>
    
    <item>
      <title>(ant) build.xml 작성법</title>
      <link>/post/etc_build/</link>
      <pubDate>Sat, 02 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/etc_build/</guid>
      <description>가끔 학습용으로 Ant를 사용해야하는 일이 있다. build.xml 작성법을 익힌다면 해석하는 데에도 무리가 없을 것이다.
지금부터 이 문장을 처음부터 만들어 나가봅시다. &amp;lt;?xml version=&amp;quot;1.0&amp;quot;&amp;gt; &amp;lt;project name=&amp;quot;dms&amp;quot; default=&amp;quot;compile&amp;quot; basedir=&amp;quot;.&amp;quot;&amp;gt; &amp;lt;property name=&amp;quot;build.dir&amp;quot; location=&amp;quot;build&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;build.prod.dir&amp;quot; location=&amp;quot;${build.dir}/prod&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;build.test.dir&amp;quot; location=&amp;quot;${build.dir}/test&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;doc.dir&amp;quot; location=&amp;quot;doc&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;index.dir&amp;quot; location=&amp;quot;index&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;src.dir&amp;quot; location=&amp;quot;src&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;test.dir&amp;quot; location=&amp;quot;test&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;vendor.lib.dir&amp;quot; location=&amp;quot;vendor/lib&amp;quot;/&amp;gt; &amp;lt;path id=&amp;quot;project.classpath&amp;quot;&amp;gt; &amp;lt;pathelement location=&amp;quot;${build.prod.dir}&amp;quot; /&amp;gt; &amp;lt;pathelement location=&amp;quot;${build.test.dir}&amp;quot; /&amp;gt; &amp;lt;fileset dir=&amp;quot;${vendor.lib.dir}&amp;quot;&amp;gt; &amp;lt;include name=&amp;quot;*.jar&amp;quot;/&amp;gt; &amp;lt;/fileset&amp;gt; &amp;lt;/path&amp;gt; &amp;lt;target name=&amp;quot;prepare&amp;quot;&amp;gt; &amp;lt;mkdir dir=&amp;quot;${build.prod.dir}&amp;quot; /&amp;gt; &amp;lt;mkdir dir=&amp;quot;${build.</description>
    </item>
    
    <item>
      <title>Bootstrap grid system</title>
      <link>/post/css_bootstrap_grid/</link>
      <pubDate>Wed, 20 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/css_bootstrap_grid/</guid>
      <description>(부트스트랩으로 디자인하라 - 양용석(로드북)의 내용을 참조하였습니다.)
개인 학습 정리를 위해 작성했던 글입니다.
책의 이미지까지 첨부하지는 않았습니다.
이 내용에 대한 설명은 https://getbootstrap.com/docs/4.0/layout/grid/이곳에 이미지와 함께 잘 설명되어 있는 것 같습니다.
부트스트랩은 그리드 시스템을 이용하여 레이아웃(배치)을 잡습니다. 그리드(격자)grid는 총 12열로 구성되어 있으며, 클래스 선택자를 기반으로 화면의 레이아웃을 잡아주는 역활을 합니다. 특징1 모든 그리드는 중첩될 수 있는데 하나의 그리드 내부에 또 하나의 그리드를 만들 수 있습니다. 내부에 만들어진 그리드는 또 다시 12개의 그리드가 생성됩니다.</description>
    </item>
    
    <item>
      <title>HTML에서 JavaScript Load</title>
      <link>/post/javascript_load/</link>
      <pubDate>Wed, 20 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/javascript_load/</guid>
      <description>본 글은 생활코딩의 내용을 정리 요약한 것이다. 먼저 HTML에서 JavaScript Load하는 방법은 3가지로 나눌 수 있다. 1. 인라인 alert(&#39;hello world&#39;) 자바스크립트 코드 onclick=&#34; &#34;, onchange 등등 HTML 속성 장점 : 태그 안에 분명히 있다는 것. 단점 : html, 즉 정보를 나타내는 코드에 제어 코드가 들어가있다. 유지보수에 어렵다. 짬뽕. js가 필요할 때 js에 찾아가고, html필요할 때 html에 찾아가는게 좋다. 2. script태그 까지는 html태그. 이제 script 코드가 나온다는 신호 장점 : 인라인보다 유지보수보다 용이해짐.</description>
    </item>
    
    <item>
      <title>객체(JavaScript Basic)</title>
      <link>/post/javascript_object/</link>
      <pubDate>Wed, 20 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/javascript_object/</guid>
      <description>1.개요#배열(Javascript에서 자료형은 객체이다.)은 객체를 기반으로 만들어졌으므로 배열과 객체는 상당히 비슷합니다. 다른 점이 있다면 배열은 요소에 접근할 때 인덱스를 사용하지만 var array = [&#39;사과&#39;, &#39;바나나&#39;, &#39;망고&#39;, &#39;딸기&#39;]; (배열 선언) 객체는 키를 사용한다는 점입니다. var product = { 제품명: &#39;7D 건조 망고&#39;, 유형: &#39;당절임&#39;, 성분: &#39;망고, 설탕, 메타중아황산나트륨, 치자황색소&#39;, 원산지: &#39;필리핀&#39; }; #요소에 접근하는 방법은 2가지가 있습니다. 1. 배열과 비슷한 방법 product[&#39;제품명&#39;] product[&#39;유형&#39;] product[&#39;성분&#39;] product[&#39;원산지&#39;] 2. 일반적으로 사용하는 방법 product.제품명 product.유형 product.성분 product.</description>
    </item>
    
    <item>
      <title>CSS 박스모델</title>
      <link>/post/css_layout/</link>
      <pubDate>Tue, 19 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/css_layout/</guid>
      <description>CSS와 박스 모델 박스 모델은 &#39;블록 레벨(block-level)&#39; 요소인지 &#39;인라인 레벨(Inline-level)&#39; 요소인지에 따라 나열 방법이 달라집니다. 블록 레벨(block-level) 요소 태그를 사용해 요소를 사입했을 때 혼자 한 줄을 차지하는 요소입니다. 너비나 마진, 패딩 등을 이용해 크기나 위치를 지정하려면 블록 레벨 요소여야 합니다. &amp;lt;div&amp;gt; 태그나 &amp;lt;p&amp;gt; 태그 등 블록 레벨 태그 p, ,h1~h6, ul, ol, pre, dl, div, noscript, blockquote, form, hr, table, fieldset, address, article 인라인 레벨(Inline-level) 요소 줄을 차지하지 않는 요소입니다.</description>
    </item>
    
    <item>
      <title>함수(JavaScript Basic)</title>
      <link>/post/javascript_function/</link>
      <pubDate>Tue, 19 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/javascript_function/</guid>
      <description>함수는 코드의 집합을 나타내는 자료형입니다. 1.익명함수: 이름이 없으므로 변수에 넣어 사용해야 합니다.(point= 변수) var 함수 = function() { }; 자바스크립트에서 함수는 한의 자료형이지만 여타, 자료형과 다르게 뒤에 괄호를 열고 닫음으로써 코드를 실행합니다. = &#39;함수를 호출&#39; 함수(); // 익명함수를 호출할 때. 2.선언적 함수: 이름이 있는 함수. function 함수( ) { } #선언적 함수와 익명 함수의 차이점. 익명함수는 변수로 선언했기 때문에 오류 발생. 반대로 선언적 함수를 사용하면 코드가 정상적으로 실행.  함수( ); // 오류.</description>
    </item>
    
    <item>
      <title>CSS 기초</title>
      <link>/post/css_basic/</link>
      <pubDate>Mon, 18 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/css_basic/</guid>
      <description>HTML5 + CSS3 웹 표준의 정석의 내용을 요약한 것입니다.
 1. 스타일과 스타일 시트 스타일 웹 문서에서 스타일(style)이란 HTML 문서에서 자주 사용하는 글꼴이나 색상, 정렬, 각 요소들의 배치 방법 등 문서의 겉모습을 결정짓는 내용들을 가리킵니다. 웹 문서의 내용과 상관없이 디자인만 바꿀 수 있습니다. 스타일 형식 p(=선택자) { text-align(=스타일 속성): center(=속성 값) } 스타일 주석 /* */ 스타일 시트(내부 스타일 시트와 외부 스타일 시트로 나뉜다.) 내부 스타일 시트 &amp;lt;style&amp;gt;&amp;lt;/style&amp;gt; 안에 정의 외부 스타일 시트 &amp;lt;link href=&#34;</description>
    </item>
    
    <item>
      <title>XML 기본</title>
      <link>/post/xml_basic/</link>
      <pubDate>Mon, 18 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/xml_basic/</guid>
      <description>마크업(mark up)이란 문서 내용 이외에 문서의 구조를 정의하거나 표현하기 위한 부가적인 정보이다. 다양한 플랫폼과 애플리케이션이 공존하는 인터넷에서 문서의 호환성은 매우 중요한 요소이다.(ex)oracle과 mysql의 호환) XML은 SGML로부터는 정보의 구조적 기술과 정보 내용과 표시 정보를 분리한 구조를 이어받고, HTML로부터는 인터넷의 이용 환경을 이어받았다.
  XML 일반 기술 1. 네임스페이스 서로 다른 XML 문서 간에 사용하는 태그를 구벼할 수 있게 하는 기술이다. 여러 XML 문서를 통합하여 새로운 하나의 XML 문서를 생성하는 겨웅 &#39;이름 충돌&#39; 문제를 해결하기 위한 것이다.</description>
    </item>
    
    <item>
      <title>배열(JavaScript Basic)</title>
      <link>/post/javascript_array/</link>
      <pubDate>Mon, 18 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/javascript_array/</guid>
      <description>본 내용은 필자가 JavaScript 배열에서 정리되지 않은 부분만 작성하였습니다. 배열은 여러 개의 변수를 한꺼번에 선언해 다룰 수 있는 자료형입니다. 배열은 아래처럼 대괄호 []로 생성합니다. 대괄호를 사용하고 안에 있는 값을 쉼표로 구분해 입력합니다. 배연 안에 입력된 값을 요소 element라고 합니다. 어떠한 종류의 자료형도 요소가 될 수 있습니다. var exampleA = [273, &#39;String&#39;, true, function() {}, { }, [273, 103]]; 각 요소를 사용하기 exampleA[n] length 속성 alert(exampleA.legth); push() 메소드 exampleA.push(23); 문자열과 배열 var a = &#34;</description>
    </item>
    
    <item>
      <title>Javascript 기본 문법</title>
      <link>/post/javascript_basic/</link>
      <pubDate>Sun, 17 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/javascript_basic/</guid>
      <description>&amp;lsquo;모던 웹을 위한 JavaScript jQuery입문 3판&amp;rsquo;의 내용을 요약한 것입니다.
CHAPTER 2 기본 문법 2.1 기본 용어 2 키워드 자바스크립트가 처음 만들어질 때 정해진 특별한 의미가 있는 단어를 &#39;키워드&#39;라고 합니다. (사진P.28) 3 식별자 식별자를 만들 때는 다음의 규칙을 지켜야 합니다. 1.키워드를 사용하면 안 됩니다. 2.숫자로 시작하면 안 됩니다. 3.특수 문자는 _와 $만 허용합니다. 4.공백 문자를 포함할 수 없습니다. 이 네 가지 규칙만 만족한다면 모든 단어를 식별자로 사용할 수 있습니다 식별자를 만들 때 알파벳을 사용하는 것 외에도 자바스크립트 개발자 대부분이 지키는 관례가 있습니다.</description>
    </item>
    
    <item>
      <title>XML 특수 기호</title>
      <link>/post/xml_language/</link>
      <pubDate>Sun, 17 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/xml_language/</guid>
      <description>xml 문서에서 특수 기호를 사용하려면 개체 참조(Entity Reference)나 CDATA(Character Data)를 사용해야 한다.
1, 개체 참조 개체 참조는 미리 정해진 특별한 코드나 이름을 사용할 때 쓰이는 개념으로, 개체에 할당된 이름이 개체명이다. 예를 들면 ,&amp;lt; 기호를 표현하는 &amp;lsquo;lt&amp;rsquo;라는 개체명은 &amp;lsquo;less than&amp;rsquo;의 머리 글자로 정의한 것이다. 개체 참조는 &amp;amp;와 ;을 사용하여 나타내며, 개체 참조로 특수 기호를 표현할 수 있다.
ex) 표현 문자 &amp;lt; 개체 참조명 &amp;amp;lt; 어원 less then 표현 문자 &amp;gt; 개체 참조명 &amp;amp;gt; 어원 greater then 표현 문자 &amp;lsquo; 개체 참조명 &amp;amp;apos; 어원 apostrophe 표현 문자 &amp;ldquo; 개체 참조명 &amp;amp;quot; 어원 quotation marks 표현 문자 &amp;amp; 개체 참조명 &amp;amp;amp; 어원 ampersand</description>
    </item>
    
    <item>
      <title>XML 네임스페이스</title>
      <link>/post/xml_namespace/</link>
      <pubDate>Sat, 16 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/xml_namespace/</guid>
      <description>네임스페이스의 개념과 사용 XML에서 태그를 자유롭게 정의할 수 있다는 점은 장점이지만, 중복 태그가 생길 수 있는 문제가 있다. 중복 태그로 빋어질 수 있는 이름 충돌을 해결하기 위해 등장한 개념이 네임스페이스이다. 네임 스페이스는 각 요소명과 속성명을 정확히 인식할 수 있는 개념을 제공한다.
네임스페이스 선언 1.기본 네임스페이스 선언 어떤 요소에 대하여 xmlns 속성을 사용해서 네임스페이스를 선언한 경우, 그 요소 내용 중 네임스페이스 접두사를 붙이지 않고 기술한 하위child 요소에도 자동으로 상위parent 요소에서 선언한 네임스페이스를 적용한다.</description>
    </item>
    
    <item>
      <title>DTD 문서 제작 기본</title>
      <link>/post/xml_dtd/</link>
      <pubDate>Wed, 30 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/xml_dtd/</guid>
      <description>Well-formed Document(정형식 문서)와 Valid Document(유효한) XML 문서 |정형식 문서|유효한 문서| 정형식 문서| Well-formed Document(정형식 문서)는 흔히 말하는 XML 문서에 속한다. XML 문법과 규칙에 맞게 만들어진 오류가 없는 문서이다. Valid Document(유효한 문서) XML 문서를 표준화할 목적으로, 문서 형태 정의(DTD)에 따라 만든 XML문서. DTD(Document Type Definition)는 문서를 형태를 정의하는 문서를 말한다. XML 문서의 구조를 명시적으로 선언하며, XML 문서가 잘 만들어진 유효한 문서인지 확인하는 역할을 한다. 1. 작성한 문서를 이해하는 데 도움.(문서 가독성) 2.</description>
    </item>
    
    <item>
      <title>Git 기초(버전관리)</title>
      <link>/post/etc_git_basic/</link>
      <pubDate>Sun, 03 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/etc_git_basic/</guid>
      <description>아래 내용은 생활코딩 Git(CUI, 윈도우 환경) 강의를 정리한 내용입니다. 강의 내용 요약이므로 복습 용도로 유용합니다. 자세한 설명과 과정은 생활코딩을 참조하길 바랍니다. 
설치, 저장소 생성, 기본 설정Git을 다운 받고 설치한다. https://git-scm.com/ Git Bash(윈도우를 리눅스 명령어로 관리) 파일을 실행한다. 프로젝트 파일을 만듭니다.(나의 pwd는 /c/Users/DongHo/ 이었다.) $mkdir projectN 프로젝트 디렉토리로 들어갑니다. $cd projectN 현재 디렉토리를 git의 (버전) 저장소로 만듭니다. $git init($ls -al을 해보면 파란색 글씨로 .git/(버전관리를 하게되면 여러가지 정보가 저장되는 곳이다.) 폴더가 생성된 것을 확인할 수 있다.</description>
    </item>
    
  </channel>
</rss>